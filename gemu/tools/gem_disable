#GEM0
baseaddr=0xFF0B0000

dev=0
show_regaddr=true

if [ $# -ge 1 ]; then 
    dev=$1  
    [ $1 -eq 0 ] && baseaddr=0xFF0B0000
    [ $1 -eq 1 ] && baseaddr=0xFF0C0000
    [ $1 -eq 2 ] && baseaddr=0xFF0D0000
    [ $1 -eq 3 ] && baseaddr=0xFF0E0000
fi

if [ $# -ge 2 ]; then 
    show_regaddr=false
fi

echo GEM$dev Baseaddr : $baseaddr

network_ctrl_reg=0x00
network_cfg_reg=0x04
network_status_reg=0x08

dma_cfg_reg=0x10
tx_status_reg=0x14
rx_q_ptr_reg=0x18
tx_q_ptr_reg=0x1C
rx_status_reg=0x20

int_status_reg=0x24
int_enable_reg=0x28
int_disable_reg=0x2C
int_mask_reg=0x30

int_q1_status_reg=0x400
int_q1_enable_reg=0x620
int_q1_disable_reg=0x640
int_q1_mask_reg=0x680

# args regname, offset
read_reg_quiet()
{
    regname=$1
    offset=$2
    devmem $regaddr 32
}

read_reg()
{
    regname=$1
    offset=$2
    printf -v regaddr '%#x' "$((baseaddr+offset))"
    #echo -n ">"$regname $regaddr= 

    if [ "$show_regaddr" = true ]; then
        printf "%-20s %10s" ">"$regname $regaddr= 
    else
        printf "%-20s" ">"$regname 
    fi
        
    #echo -n " "$regname: 
    devmem $regaddr 32
}

read_mpsoc_reg()
{
    regname="$1"
    regaddr="$2"

    if [ "$show_regaddr" = true ]; then
        printf "%-20s %10s" ">"$regname $regaddr= 
    else
        printf "%-20s" ">"$regname 
    fi
        
    #echo -n " "$regname: 
    devmem $regaddr 32
    sleep 0.1
}

write_reg()
{
    regname="$1"
    offset="$2"
    val="$3"
    printf -v regaddr '%#x' "$((baseaddr+offset))"
    #echo -n ">"$regname $regaddr= 

    if [ "$show_regaddr" = true ]; then
        printf "Writing %-20s %10s %10s\n" $regname $regaddr $val 
    else
        printf "Writing %-20s %10s\n" $regname $val
    fi
        
    #echo -n " "$regname: 
    echo "Write command is \"devmem $regaddr 32 $val\""
    devmem $regaddr 32 $val
    sleep 0.1
}

show_gem_regs()
{
    read_reg network_control  $network_ctrl_reg
    read_reg network_config   $network_cfg_reg
    read_reg network_status   $network_status_reg
    read_reg dma_config       $dma_cfg_reg
    read_reg tx_q_ptr         $tx_q_ptr_reg
    read_reg rx_q_ptr         $rx_q_ptr_reg
    read_reg tx_status        $tx_status_reg
    read_reg rx_status        $rx_status_reg

    read_reg int_status       $int_status_reg
    read_reg int_enable       $int_enable_reg
    read_reg int_disable      $int_disable_reg
    read_reg int_mask         $int_mask_reg

    read_reg int_q1_status    $int_q1_status_reg
    read_reg int_q1_enable    $int_q1_enable_reg
    read_reg int_q1_disable   $int_q1_disable_reg
    read_reg int_q1_mask      $int_q1_mask_reg
}

disable_gem()
{
    show_gem_regs

    echo "Disabling Interrupts"

    #disable all interrupts
    write_reg int_disable    "$int_disable_reg"      0x3FFFFFFF
    #write_reg int_q1_disable "$int_q1_disable_reg"   0xFFF

    echo "Disabled interrupts"
    echo "wair 2 secs.."
    sleep 2

    #disable tx/rx
    write_reg network_ctrl "$network_ctrl_reg" 0x00100000 
    echo "disabled tx/rx/mgmt"
    echo "wait 2 secs.."
    sleep 2

    echo "clear any pending interrupt"

    int_status_val=`read_reg_quiet int_status "$int_status_reg"`
    echo "int status reg val >> $int_status_val"
    while [[ "$int_status_val" -ne 0 ]]; do
        write_reg int_status "$int_status_reg" 0 
        echo "sleeping 5 secs.."
        sleep 5
        int_status_val=`read_reg_quiet int_status "int_status_reg"`

        echo "new int status $int_status_val"
    done
    echo "Cleared int status"
    
    int_q1_status_val=`read_reg_quiet int_q1_status $int_q1_status_reg`
    echo "int q1 status reg val >> $int_q1_status_val"
    while [[ "$int_q1_status_val" -ne 0 ]]; do
        write_reg int_q1_status "$int_q1_status_reg" 0 
        echo "sleeping 5 secs.."
        sleep 5
        int_q1_status_val=`read_reg_quiet int_q1_status "$int_q1_status_reg"`

        echo "new int q1 status $int_q1_status_val"
    done
    echo "Cleared int q1 status"

    echo "done disabling gem$dev"

    show_gem_regs
}


disable_gem

